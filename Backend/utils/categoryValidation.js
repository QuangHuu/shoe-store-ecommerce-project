const Joi = require('joi');

// Schema for creating a new category
const createCategoryValidation = (data) => {
    const schema = Joi.object({
        name: Joi.string().required().trim().messages({
            'any.required': 'Category name is required.',
            'string.empty': 'Category name cannot be empty.'
        }),
        description: Joi.string().optional().allow('').messages({ // Description is optional, allow empty string
            'string.empty': 'Category description cannot be empty if provided.'
        }),
        // Slug is auto-generated by the model, so it's not expected from the frontend during creation.
        // If the frontend *does* send it, Joi will still validate it as a string, but it's ignored by backend logic.
        slug: Joi.string().optional().trim(),
        // Parent is an ObjectId string or null for main categories.
        // Joi checks if it's a string, then service layer validates if it's a valid ObjectId.
        parent: Joi.string().optional().allow(null, '').messages({
            'string.empty': 'Parent category ID cannot be empty.',
            'string.base': 'Parent category ID must be a string.'
        }),
        // 'ancestors' are auto-generated by the model based on 'parent',
        // so they should NOT be sent by the frontend. Removed from validation.
        // 'type' is auto-generated by the model based on 'parent',
        // so it should NOT be sent by the frontend. Removed from validation.
    });
    return schema.validate(data);
};

// Schema for updating an existing category
const updateCategoryValidation = (data) => {
    const schema = Joi.object({
        name: Joi.string().trim().messages({
            'string.empty': 'Category name cannot be empty.'
        }),
        description: Joi.string().optional().allow(''),
        // Slug is auto-generated, optional for update as well.
        slug: Joi.string().optional().trim(),
        // Parent is an ObjectId string or null.
        parent: Joi.string().optional().allow(null, '').messages({
            'string.empty': 'Parent category ID cannot be empty.',
            'string.base': 'Parent category ID must be a string.'
        }),
        // 'ancestors' are managed by backend logic, not usually passed in update payload. Removed from validation.
        // 'type' is auto-generated by the model, not usually passed in update payload. Removed from validation.
    }).min(1); // At least one field must be present for update
    return schema.validate(data);
};

module.exports = {
    createCategoryValidation,
    updateCategoryValidation,
};
