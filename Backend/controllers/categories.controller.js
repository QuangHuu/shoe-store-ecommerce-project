const categoryService = require('../services/categories.service');

/**
 * Controller to create a new category.
 * POST /api/categories
 * Request body: { name, description?, parent? }
 * The 'type' field is auto-generated by the backend model.
 */
async function createCategoryController(req, res) {
    try {
        const newCategory = await categoryService.createCategory(req.body);
        res.status(201).json(newCategory); // 201 Created
    } catch (error) {
        console.error('Error in createCategoryController:', error.message);
        // Distinguish between client-side errors (validation, duplicate, invalid parent)
        if (error.message.includes('validation') || error.message.includes('exists') || error.message.includes('Invalid') || error.message.includes('Parent category not found') || error.message.includes('A subcategory cannot be a parent')) {
            return res.status(400).json({ message: error.message }); // 400 Bad Request
        }
        res.status(500).json({ message: 'Failed to create category.' }); // 500 Internal Server Error
    }
}

/**
 * Controller to get all categories (main and sub).
 * GET /api/categories
 */
async function getAllCategoriesController(req, res) {
    try {
        const categories = await categoryService.getAllCategories();
        res.status(200).json(categories); // 200 OK
    } catch (error) {
        console.error('Error in getAllCategoriesController:', error.message);
        res.status(500).json({ message: 'Failed to retrieve categories.' }); // 500 Internal Server Error
    }
}

/**
 * Controller to get a single category by ID.
 * GET /api/categories/:id
 */
async function getCategoryByIdController(req, res) {
    try {
        const category = await categoryService.getCategoryById(req.params.id);
        // Service already throws 'Category not found', so no need for if(!category) check here
        res.status(200).json(category); // 200 OK
    } catch (error) {
        console.error('Error in getCategoryByIdController:', error.message);
        if (error.message.includes('not found')) {
            return res.status(404).json({ message: error.message }); // 404 Not Found
        }
        if (error.message.includes('Invalid')) {
            return res.status(400).json({ message: error.message }); // 400 Bad Request
        }
        res.status(500).json({ message: 'Failed to retrieve category.' }); // 500 Internal Server Error
    }
}

/**
 * Controller to get a single category by Name.
 * GET /api/categories/by-name/:name (assuming route uses :name param)
 * Or GET /api/categories?name=X (if using query param, adjust req.params.name to req.query.name)
 */
async function getCategoryByNameController(req, res) {
    try {
        const category = await categoryService.getCategoryByName(req.params.name); // or req.query.name if route uses query string
        if (!category) { // Service doesn't throw 'not found', so check here
            return res.status(404).json({ message: 'Category not found' });
        }
        res.status(200).json(category);
    } catch (error) {
        console.error('Error in getCategoryByNameController:', error.message);
        if (error.message.includes('Category name is required')) {
            return res.status(400).json({ message: error.message });
        }
        res.status(500).json({ message: 'Failed to retrieve category by name.' });
    }
}

/**
 * Controller to get a single category by Slug.
 * GET /api/categories/by-slug/:slug (assuming route uses :slug param)
 */
async function getCategoryBySlugController(req, res) {
    try {
        const category = await categoryService.getCategoryBySlug(req.params.slug);
        if (!category) { // Service doesn't throw 'not found', so check here
            return res.status(404).json({ message: 'Category not found' });
        }
        res.status(200).json(category);
    } catch (error) {
        console.error('Error in getCategoryBySlugController:', error.message);
        if (error.message.includes('Category slug is required')) {
            return res.status(400).json({ message: error.message });
        }
        res.status(500).json({ message: 'Failed to retrieve category by slug.' });
    }
}

/**
 * Controller to get all main categories.
 * GET /api/categories/main
 */
async function getMainCategoriesController(req, res) {
    try {
        const mainCategories = await categoryService.getMainCategories();
        res.status(200).json(mainCategories);
    } catch (error) {
        console.error('Error in getMainCategoriesController:', error.message);
        res.status(500).json({ message: 'Failed to retrieve main categories.' });
    }
}

/**
 * Controller to get subcategories for a given parent category ID.
 * GET /api/categories/:mainCategoryId/subcategories
 */
async function getSubcategoriesByParentController(req, res) {
    try {
        const { mainCategoryId } = req.params;
        const subcategories = await categoryService.getSubcategories(mainCategoryId);
        res.status(200).json(subcategories);
    } catch (error) {
        console.error('Error in getSubcategoriesByParentController:', error.message);
        if (error.message.includes('Invalid parent category ID') || error.message.includes('Parent category not found') || error.message.includes('is not a main category')) {
            return res.status(400).json({ message: error.message }); // 400 Bad Request
        }
        res.status(500).json({ message: 'Failed to retrieve subcategories.' });
    }
}

/**
 * Controller to update an existing category.
 * PUT /api/categories/:id
 * Request body: { name?, description?, parent? }
 * The 'type' field is auto-generated by the backend model.
 */
async function updateCategoryController(req, res) {
    try {
        const updatedCategory = await categoryService.updateCategory(req.params.id, req.body);
        // Service already throws 'Category not found', so no need for if(!updatedCategory) check here
        res.status(200).json(updatedCategory); // 200 OK
    } catch (error) {
        console.error('Error in updateCategoryController:', error.message);
        // Handle various specific error types from service layer
        if (error.message.includes('not found')) {
            return res.status(404).json({ message: error.message }); // 404 Not Found
        }
        if (error.message.includes('Invalid') || error.message.includes('exists') || error.message.includes('Cannot convert') || error.message.includes('Cannot assign') || error.message.includes('A subcategory cannot be a parent')) {
            return res.status(400).json({ message: error.message }); // 400 Bad Request / Conflict
        }
        res.status(500).json({ message: 'Failed to update category.' }); // 500 Internal Server Error
    }
}

/**
 * Controller to delete a category by its ID.
 * DELETE /api/categories/:id
 */
async function deleteCategoryController(req, res) {
    try {
        const deletedCategory = await categoryService.deleteCategory(req.params.id);
        // Service already throws 'Category not found' so no need for if(!deletedCategory) check here
        res.status(200).json({ message: 'Category deleted successfully.' }); // 200 OK
    } catch (error) {
        console.error('Error in deleteCategoryController:', error.message);
        // Handle specific error types from service layer
        if (error.message.includes('not found')) {
            return res.status(404).json({ message: error.message }); // 404 Not Found
        }
        if (error.message.includes('Invalid')) {
            return res.status(400).json({ message: error.message }); // 400 Bad Request
        }
        if (error.message.includes('Cannot delete category with associated products') || error.message.includes('Cannot delete a main category that has subcategories')) {
            return res.status(409).json({ message: error.message }); // 409 Conflict
        }
        res.status(500).json({ message: 'Failed to delete category with associated products.' }); // 500 Internal Server Error
    }
}

module.exports = {
    createCategoryController,
    getAllCategoriesController,
    getCategoryByIdController,
    getCategoryByNameController,
    getCategoryBySlugController,
    getMainCategoriesController,      
    getSubcategoriesByParentController, 
    updateCategoryController,
    deleteCategoryController,
};
